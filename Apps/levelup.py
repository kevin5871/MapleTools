
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from curses.ascii import isdigit
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter
from tkinter import Checkbutton, Tk, Canvas, Entry, Button, PhotoImage, Toplevel, ttk
import sys
import csv
import levelupcore
import pyglet
import os

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets/level")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

    
def option_close() :
    global optionwindow
    optionwindow.destroy()
    optionwindow = None

pyglet.font.add_file(os.path.join(OUTPUT_PATH, "assets/NEXON Lv2 Gothic.ttf"))


optionslist = {'Coupon':'없음', 'MVP':0, 'Potion':0, 'ExGold':0, 'Merlink':'없음', 'HolyS' :0, 'Ring':0,'Zero':'없음','Union':0,'Hyper':0,'Pendant':'없음','Dice':0,'PC':0,'Bud':0,'etc':0}
canvas2 = None
buffstate = dict()
var1 = dict()

def edit_option() :
    global hap, canvas2
    states()
    canvas2.itemconfig(hap, text="총합 = %d%%"% (levelupcore.buff(buffstate) * 100))
    lvlmain()

def states() :
    global var1, optionslist, buffstate
    c = dict()
    if var1 != {} :
        for i in optionslist :
            if i == 'HolyS' :
                flag = 0
                for j in range(0, len(var1[i].get())) :
                    if isdigit(var1[i].get()[j]) != True : 
                        flag = 1
                        break
                if flag == 0 :
                    if 0 <= int(var1[i].get()) and int(var1[i].get()) <= 70:
                        c.update({i:var1[i].get()})
                    else :
                        var1[i].set(0)
                else :
                    var1[i].set(0)
            elif i == 'Union' :
                flag = 0
                for j in range(0, len(var1[i].get())) :
                    if isdigit(var1[i].get()[j]) != True : 
                        flag = 1
                        break
                if flag == 0 :
                    if 0 <= int(var1[i].get()) and int(var1[i].get()) <= 10:
                        c.update({i:var1[i].get()})
                    else :
                        var1[i].set(0)
                else :
                    var1[i].set(0)
            elif i == 'Hyper' :
                flag = 0
                for j in range(0, len(var1[i].get())) :
                    if isdigit(var1[i].get()[j]) != True : 
                        flag = 1
                        break
                if flag == 0 :
                    if 0 <= int(var1[i].get()) and int(var1[i].get()) <= 10:
                        c.update({i:var1[i].get()})
                    else :
                        var1[i].set(0)
                else :
                    var1[i].set(0)
            elif i == 'etc' :
                flag = 0
                for j in range(0, len(var1[i].get())) :
                    if isdigit(var1[i].get()[j]) != True : 
                        flag = 1
                        break
                if flag == 0 :
                    c.update({i:var1[i].get()})

                else :
                    var1[i].set(0)
            else :
                c.update({i:var1[i].get()})
        buffstate = c
    else :
        buffstate = optionslist
    #return buffstate
    #print(c)


def beforeoption() :
    #global optionwindow
    #if optionwindow
    if str(type(optionwindow)) == "<class 'tkinter.Toplevel'>" :
        option_close()
    else :
        showoption() 

def showoption() :
    global optionwindow, var1, optionslist, hap, canvas2
    x = window.winfo_x()
    y = window.winfo_y()
    # OptionWindow Settings
    optionwindow = Toplevel(window)

    optionwindow.geometry("500x260")
    optionwindow.overrideredirect(1)
    optionwindow.attributes('-topmost', True)
    optionwindow.attributes('-alpha', opacity)
    optionwindow.resizable(False, False)
    optionwindow.bind('<Enter>', on_start_hover_option)
    optionwindow.bind('<Leave>', on_end_hover_option)
    optionwindow.geometry(f"+{x+405}+{y}")
    
    canvas2 = Canvas(optionwindow, bg = "#FFFFFF", height = 260, width = 500, bd = 0, highlightthickness = 0, relief = "ridge")
    canvas2.place(x = 0, y = 0)
    
    canvas2.create_rectangle(0.0, 0.0, 500.0, 30.0, fill="#FFA13D", outline="")
    canvas2.create_text(20.0, 5, anchor="nw", text="MapleTools", fill="#FFFFFF", font=("NEXON Lv2 Gothic", 18 * -1))
    button_4 = Button(optionwindow, image=button_image_3, borderwidth=0, highlightthickness=0, command=lambda: option_close())
    button_4.place(x=445.0, y=2.5, width=50.0, height=25.0)

    button_5 = Button(optionwindow, image=button_image_5, borderwidth=0, highlightthickness=0, command=lambda: edit_option())
    button_5.place(x=350.0, y=200.0, width=125.0, height=40.0)
    
    hap = canvas2.create_text(125.0, 195.0, anchor="nw", text="총합 = %d%%"% (levelupcore.buff(buffstate) * 100), fill="#393939", font=("NEXON Lv2 Gothic", 15 * -1))

    canvas2.create_text(10.0, 40.0, anchor="nw", text="경험치 옵션", fill="#393939", font=("NEXON Lv2 Gothic", 18 * -1))
    name = {'Coupon':'경쿠', 'MVP':'경뿌+MVP', 'Potion':'경축비', 'ExGold':'익골', 'Merlink':'메르링크', 'HolyS' :'홀심(0~35)', 'Ring':'혈맹반지','Zero':'제로공격','Union':'유니온','Hyper':'하이퍼(0~10)','Pendant':'정펜','Dice':'다이스6번','PC':'PC방','Bud':'쑥쑥새싹','etc':'기타'}
    # Coupon(0,50,100)/ Merces (0,1,2) / HolyS (0~35) / Zero(B,A,S,SS,SSS) / Pen(0,10,20,30) / Hyper(0~10)
    x = -90
    y = 70
    #var1 = dict()
    for item in optionslist :
        x = x + 100
        if(x > 450) :
            y = y + 30
            x = 10
        if item == 'Coupon' :
            try :
                var1[item] == var1[item]
            except :
                var1[item] = tkinter.StringVar(value='없음')
            canvas2.create_text(x+5, y+5, anchor="nw", text="경쿠", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            ttk.Combobox(optionwindow, textvariable=var1[item], values= ['없음','1.5배','2배', '3배'], font=("NEXON Lv2 Gothic",16 * -1), state="readonly", width=5).place(x=x+50, y=y)
            x = x + 50
        elif item == 'Merlink' :
            try :
                var1[item] == var1[item]
            except :
                var1[item] = tkinter.StringVar(value='없음')
            canvas2.create_text(x+5, y+5, anchor="nw", text="메르링크", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            ttk.Combobox(optionwindow, textvariable=var1[item], values= ['없음','1레벨','2레벨'], font=("NEXON Lv2 Gothic",16 * -1), state="readonly", width=5).place(x=x+70, y=y)
            x = x + 70
        elif item == 'HolyS' :
            try :
                var1[item] == var1[item]
            except :
                var1[item] = tkinter.StringVar(value=0)
            canvas2.create_text(x+5, y+5, anchor="nw", text="홀심(0~70)", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            Entry(optionwindow, textvariable=var1[item], font=('NEXON Lv2 Gothic', 16*-1), width=5).place(x=x+90,y=y+2)
            x = x + 90
        elif item == 'Zero' :
            try :
                var1[item] == var1[item]
            except :
                var1[item] =tkinter.StringVar(value='없음')
            canvas2.create_text(x+5, y+5, anchor="nw", text="제로공격", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            ttk.Combobox(optionwindow, textvariable=var1[item], values= ['없음','B','A','S','SS','SSS'], font=("NEXON Lv2 Gothic",16 * -1), state="readonly", width=5).place(x=x+70, y=y)
            x = x + 70
        elif item == 'Union' :
            try : 
                var1[item] == var1[item]
            except :
               var1[item] = tkinter.StringVar(value=0)
            canvas2.create_text(x+5, y+5, anchor="nw", text="유니온(0~10)", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            Entry(optionwindow, textvariable=var1[item], font=('NEXON Lv2 Gothic', 16*-1), width=5).place(x=x+100,y=y+2)
            x = x + 50  
        elif item == 'Hyper' :
            try :
                var1[item] == var1[item]
            except :
               var1[item] = tkinter.StringVar(value=0)
            canvas2.create_text(x+5, y+5, anchor="nw", text="하이퍼(0~10)", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            Entry(optionwindow, textvariable=var1[item], font=('NEXON Lv2 Gothic', 16*-1), width=5).place(x=x+100,y=y+2)
            x = x + 100
        elif item == 'Pendant' :
            try :
                var1[item] == var1[item]
            except :
                var1[item] =tkinter.StringVar(value='없음')
            canvas2.create_text(x+5, y+5, anchor="nw", text="정펜", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            ttk.Combobox(optionwindow, textvariable=var1[item], values= ['없음','10%','20%','30%'], font=("NEXON Lv2 Gothic",16 * -1), state="readonly", width=5).place(x=x+50, y=y)
            x = x + 50
        elif item == 'etc' :
            try :
                var1[item] == var1[item]
            except :
               var1[item] = tkinter.StringVar(value=0)
            canvas2.create_text(x+5, y+5, anchor="nw", text="기타", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
            Entry(optionwindow, textvariable=var1[item], font=('NEXON Lv2 Gothic', 16*-1), width=5).place(x=x+50,y=y+2)
            x = x + 50       
        else :
            try :
                var1[item] = var1[item]
            except :
                var1[item] = tkinter.IntVar()
            Checkbutton(optionwindow, text=name[item], variable=var1[item], font=("NEXON Lv2 Gothic",16 * -1), command=lvlmain, activebackground="#ffffff", background="#ffffff").place(x=x,y=y)
        
    canvas2.create_text(10.0, 225.0, anchor="nw", text="표시 옵션", fill="#393939", font=("NEXON Lv2 Gothic", 18 * -1))
    canvas2.create_text(80.0, 230.0, anchor="nw", text="(자동 적용)", fill="#393939", font=("NEXON Lv2 Gothic", 12 * -1))
    tkinter.Checkbutton(optionwindow, variable=IfStar, text="스타포스", font=("NEXON Lv2 Gothic",16 * -1), command=lvlmain, activebackground="#ffffff", background="#ffffff").place(x=135, y=220)
    tkinter.Checkbutton(optionwindow, variable=IfExp, text="경험치대신%로", font=("NEXON Lv2 Gothic",16 * -1), command=lvlmain, activebackground="#ffffff", background="#ffffff").place(x=215, y=220)

def move_me(event):
    global optionwindow
    try:
        if optionwindow != None:
            x = window.winfo_x()
            y = window.winfo_y()
            optionwindow.geometry(f"+{x+405}+{y}")
    except:
        pass


tmpfile = open(OUTPUT_PATH / Path("./assets/variables"))
tmplist = tmpfile.read().splitlines()
optionvar = list()
for i in range(0,len(tmplist)) :
    if len(tmplist[i]) > 0 :
        if tmplist[i][0] != '#' :
            optionvar.append(tmplist[i])
opacity = float(optionvar[1])


window = Tk()
optionwindow = None

window.geometry("400x260")
window.configure(bg = "#FFFFFF")
window.overrideredirect(1)
window.attributes('-alpha', opacity)
level = tkinter.StringVar()
level.set('1')

tmpfile.close()

Data = list()
Data2 = list()
Data3 = list()
IfStar = tkinter.IntVar()
IfExp = tkinter.IntVar()

canvas = Canvas(window, bg = "#FFFFFF", height = 260, width = 400, bd = 0, highlightthickness = 0, relief = "ridge")
canvas.place(x = 0, y = 0)
canvas.create_rectangle(0.0, 150.0, 400.0, 151.0, fill="#C4C4C4", outline="")
canvas.create_rectangle(0.0, 0.0, 400.0, 30.0, fill="#FFA13D", outline="")

canvas.create_text(175.0, 35.0, anchor="nw", text="사냥터", fill="#393939", font=("NEXON Lv2 Gothic", 18 * -1))
canvas.create_text(20.0, 5, anchor="nw", text="MapleTools", fill="#FFFFFF", font=("NEXON Lv2 Gothic", 18 * -1))

button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0, command=lambda:  entryrefresh(str(int(level.get())-1)) if int(level.get()) > 1 else None, relief="flat")
button_1.place(x=70.0, y=70.0, width=50.0, height=25.0)

button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
button_2 = Button(image=button_image_2, borderwidth=0, highlightthickness=0, command=lambda: entryrefresh(str(int(level.get())+1)) if int(level.get()) < 300 else None, relief="flat")
button_2.place(x=280.0, y=70.0, width=50.0, height=25.0)

button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
button_3 = Button(image=button_image_3, borderwidth=0, highlightthickness=0, command= lambda : sys.exit(0))
button_3.place(x=345.0, y=2.5, width=50.0, height=25.0)

button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
button_4 = Button(image=button_image_4, borderwidth=0, highlightthickness=0, command= lambda : beforeoption())
button_4.place(x=10.0, y=115.0, width=380.0, height=25.0)

button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))


canvas.create_rectangle(6.0, 170.0, 31.0, 185.0, fill="#C9B037", outline="")
canvas.create_rectangle(6.0, 200.0, 31.0, 215.0, fill="#D7D7D7", outline="")
canvas.create_rectangle(6.0, 230.0, 31.0, 245.0, fill="#AD8A56", outline="")

canvas.create_text(15.0, 230.0, anchor="nw", text="3", fill="#FFFFFF", font=("NEXON Lv2 Gothic", 15 * -1), justify='center')
canvas.create_text(15.0, 200.0, anchor="nw", text="2", fill="#FFFFFF", font=("NEXON Lv2 Gothic", 15 * -1), justify='center')
canvas.create_text(15.0, 170.0, anchor="nw", text="1", fill="#FFFFFF", font=("NEXON Lv2 Gothic", 15 * -1), justify='center')
Region1 = canvas.create_text(51.0, 168.0, anchor="nw", text="지역", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Region2 = canvas.create_text(51.0, 198.0, anchor="nw", text="지역", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Region3 = canvas.create_text(51.0, 228.0, anchor="nw", text="지역", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Exp1 = canvas.create_text(308.0, 168.0, anchor="nw", text="경험치", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Exp2 = canvas.create_text(308.0, 198.0, anchor="nw", text="경험치", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Exp3 = canvas.create_text(308.0, 228.0, anchor="nw", text="경험치", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Name1 = canvas.create_text(116.0, 168.0, anchor="nw", text="지명", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Name2 = canvas.create_text(116.0, 198.0, anchor="nw", text="지명", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))
Name3 = canvas.create_text(116.0, 228.0, anchor="nw", text="지명", fill="#000000", font=("NEXON Lv2 Gothic", 16 * -1))

entry_image_1 = PhotoImage(file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(200.0 ,82.5, image=entry_image_1)
entry_1 = Entry(bd=0, bg="#DDDDDD", highlightthickness=0, textvariable=level, font=('NEXON Lv2 Gothic', 20*-1), justify='center')
entry_1.place(x=150.0, y=62.5, width=100.0, height=38.0)

def GetInfo() :
    global Data, buffstate
    if level.get() != '' :
        value = int(level.get())
    else :
        value = 1
    if 1 <= value and value < 200 :
        tplist = list()
        for i in range(1,len(Data), 1) :
            if(int(Data[i][0]) <= value and value <= int(Data[i][1])) :
                tplist.append(Data[i])
        tplist.sort(key=lambda x:x[4])
        #print(tplist)
        #print(1)
        if(IfStar.get() == 0) :
            #print(1)
            tmplist = list()
            for i in range(0, len(tplist), 1) :
                #print(tplist[i][5])
                if(int(tplist[i][5]) != 1) :
                    tmplist.append(tplist[i])
            tplist = tmplist
        tplist.reverse()

    else :
        tplist = levelupcore.calculate(value, Data2, buffstate)
        if(IfExp.get() == 1) :
            lvl = level.get()
            if lvl == '300' :
                for i in range(0, len(tplist), 1) :
                    tplist[i][4] = '-1%'
            else :
                for i in range(1, len(Data3), 1) :
                    if Data3[i][0] == lvl :
                        tmpexp = Data3[i][1]
                        break
                for i in range(0, len(tplist), 1) :
                    tplist[i][4] = str(round(int(tplist[i][4]) / int(tmpexp) * 100, 3)) + '%'
                    
        #print(tplist)
    #print(tplist)
    if len(tplist[0][2]) >= 5 :
        canvas.itemconfig(Region1, text=tplist[0][2], font=("NEXON Lv2 Gothic", 12 * -1))
        canvas.moveto(Region1, 51.0, 170.0)
    else :
        canvas.itemconfig(Region1, text=tplist[0][2], font=("NEXON Lv2 Gothic", 16 * -1))
        canvas.moveto(Region1, 51.0, 168.0)
    canvas.itemconfig(Name1, text=tplist[0][3])
    #canvas.itemconfig(Exp1, text=tplist[0][4])
    if len(tplist[0][4]) >= 9 :
        canvas.itemconfig(Exp1, text=tplist[0][4], font=("NEXON Lv2 Gothic", 12 * -1))
        canvas.moveto(Exp1, 308.0, 172.0)
    else :
        canvas.itemconfig(Exp1, text=tplist[0][4], font=("NEXON Lv2 Gothic", 16 * -1))
        canvas.moveto(Exp1, 308.0, 168.0)

    if(len(tplist)>=2) :
        if len(tplist[1][2]) >= 5 :
            canvas.itemconfig(Region2, text=tplist[1][2], font=("NEXON Lv2 Gothic", 12 * -1))
            canvas.moveto(Region2, 51.0, 200.0)
        else :
            canvas.itemconfig(Region2, text=tplist[1][2], font=("NEXON Lv2 Gothic", 16 * -1))
            canvas.moveto(Region2, 51.0, 198.0)
        canvas.itemconfig(Name2, text=tplist[1][3])
        #canvas.itemconfig(Exp2, text=tplist[1][4])
        if len(tplist[1][4]) >= 9 :
            canvas.itemconfig(Exp2, text=tplist[1][4], font=("NEXON Lv2 Gothic", 12 * -1))
            canvas.moveto(Exp2, 308.0, 202.0)
        else :
            canvas.itemconfig(Exp2, text=tplist[1][4], font=("NEXON Lv2 Gothic", 16 * -1))
            canvas.moveto(Exp2, 308.0, 198.0)
    else :
        canvas.itemconfig(Region2, text='', font=("NEXON Lv2 Gothic", 16 * -1))
        canvas.moveto(Region2, 51.0, 198.0)
        canvas.itemconfig(Name2, text='')
        canvas.itemconfig(Exp2, text='')
        canvas.moveto(Exp2, 308.0, 198.0)

    
    if(len(tplist)>=3) :
        if len(tplist[2][2]) >= 5 :
            canvas.itemconfig(Region3, text=tplist[2][2], font=("NEXON Lv2 Gothic", 12 * -1))
            canvas.moveto(Region3, 51.0, 230.0)
        else :
            canvas.itemconfig(Region3, text=tplist[2][2], font=("NEXON Lv2 Gothic", 16 * -1))
            canvas.moveto(Region3, 51.0, 228.0)
        canvas.itemconfig(Name3, text=tplist[2][3])
        #canvas.itemconfig(Exp3, text=tplist[2][4])
        if len(tplist[2][4]) >= 9 :
            canvas.itemconfig(Exp3, text=tplist[2][4], font=("NEXON Lv2 Gothic", 12 * -1))
            canvas.moveto(Exp3, 308.0, 232.0)
        else :
            canvas.itemconfig(Exp3, text=tplist[2][4], font=("NEXON Lv2 Gothic", 16 * -1))
            canvas.moveto(Exp3, 308.0, 228.0)
    else :
        canvas.itemconfig(Region3, text='')
        canvas.moveto(Region3, 51.0,228.0)
        canvas.itemconfig(Name3, text='')
        canvas.itemconfig(Exp3, text='')
        canvas.moveto(Exp3, 308.0, 228.0)

    


def LevelLimit():
    value = level.get()
    if len(value) > 0 and value != '-':
        for i in range(0, len(value), 1) :
            if isdigit(value[i]) != True :
                flag = 1
                break
            else :
                flag = 0
        if flag == 0:
            if len(value) > 3: level.set(value[:3])
            if int(level.get()) > 300 : level.set('300')
            if int(level.get()) < 1 : level.set('1')
        else :
            level.set('1')


def lvlmain(*args) :
    LevelLimit()
    GetInfo()

level.trace('w', lvlmain)


def entryrefresh(level1):
    entry_1.delete(0,'end')
    entry_1.insert(0,level1)
    return

def SaveLastClickPos(event):
    global lastClickX, lastClickY
    lastClickX = event.x
    lastClickY = event.y


def Dragging(event):
    x, y = event.x - lastClickX + window.winfo_x(), event.y - lastClickY + window.winfo_y()
    window.geometry("+%s+%s" % (x , y))

def on_start_hover(event) :
    window.attributes('-alpha', 1.0)

def on_end_hover(event) :
    window.attributes('-alpha', opacity)

def on_start_hover_option(event) :
    optionwindow.attributes('-alpha', 1.0)

def on_end_hover_option(event) :
    optionwindow.attributes('-alpha', opacity)


window.resizable(False, False)
window.attributes('-topmost', True)
window.bind('<Button-1>', SaveLastClickPos)
window.bind('<Enter>', on_start_hover)
window.bind('<Leave>', on_end_hover)
window.bind('<B1-Motion>', Dragging)
window.bind("<Configure>", move_me)
#tkinter.Button(canvas, text="옵션 >>", font=("NEXON Lv2 Gothic", 12*-1), mand=showoption).place(x=0, y=0)
def OpenData() :
    global Data, Data2, Data3
    tmpfile = open(OUTPUT_PATH / Path("./assets/data/1to199.csv"), encoding='utf-8')
    DataList = csv.reader(tmpfile, delimiter=",", doublequote=False, lineterminator="\r\n", quotechar="'", skipinitialspace=True)
    Data = list(DataList)
    tmpfile.close()

    tmpfile = open(OUTPUT_PATH / Path("./assets/data/200to300.csv"), encoding='utf-8')
    DataList = csv.reader(tmpfile, delimiter=",", doublequote=False, lineterminator="\r\n", quotechar="'", skipinitialspace=True)
    Data2 = list(DataList)
    tmpfile.close()

    tmpfile = open(OUTPUT_PATH / Path("./assets/data/exp.csv"), encoding='utf-8')
    DataList = csv.reader(tmpfile, delimiter=",", doublequote=False, lineterminator="\r\n", quotechar="'", skipinitialspace=True)
    Data3 = list(DataList)
    tmpfile.close()

    states()

OpenData()
lvlmain()
window.mainloop()
